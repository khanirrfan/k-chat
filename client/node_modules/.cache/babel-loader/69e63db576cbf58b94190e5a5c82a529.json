{"ast":null,"code":"import _objectSpread from \"/home/irfan/Desktop/tag_mango_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/irfan/Desktop/tag_mango_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/irfan/Desktop/tag_mango_test/client/src/component/message/message.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport io from \"socket.io-client\";\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { getProfileById } from '../../actions/profile';\n\nconst Message = ({\n  getProfileById,\n  profile: {\n    profile,\n    loading\n  },\n  auth,\n  match\n}) => {\n  console.log(profile);\n\n  const _useState = useState({\n    userChat: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        Chat = _useState2[0],\n        setChat = _useState2[1];\n\n  useEffect(() => {\n    getProfileById(match.params.id);\n    let server = \"http://localhost:5000\";\n    let socket = io(server);\n    socket.on(\"Output Chat Message\", messageFromBackEnd => {\n      console.log(messageFromBackEnd);\n    });\n  }, [getProfileById, match.params.id]);\n\n  const onChange = e => {\n    setChat(_objectSpread({}, Chat, {\n      [e.target.message]: e.target.value\n    }));\n  };\n\n  const submitChatMessage = e => {\n    e.preventDefault();\n    console.log(e); // let chatMessage = this.state.chatMessage\n    // let userId = this.props.user.userData._id\n    // let userName = this.props.user.userData.name;\n    // let userImage = this.props.user.userData.image;\n    // let nowTime = moment();\n    // let type = \"Image\"\n    // this.socket.emit(\"Input Chat Message\", {\n    //     chatMessage,\n    //     userId,\n    //     userName,\n    //     userImage,\n    //     nowTime,\n    //     type\n    // });\n    // this.setState({ chatMessage: \"\" })\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    style: {\n      fontSize: '2rem',\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \" Real Time Chat\")), React.createElement(\"div\", {\n    style: {\n      maxWidth: '800px',\n      margin: '0 auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"infinite-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    // ref={el => {\n    //     this.messagesEnd = el;\n    // }}\n    style: {\n      float: \"left\",\n      clear: \"both\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(\"form\", {\n    onSubmit: e => submitChatMessage(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Let's start talking\",\n    type: \"text\",\n    name: \"chatMessage\",\n    onChange: e => onChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    value: \"send\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }))));\n};\n\nMessage.propTypes = {\n  getProfileById: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getProfileById\n})(Message);","map":{"version":3,"sources":["/home/irfan/Desktop/tag_mango_test/client/src/component/message/message.js"],"names":["React","useEffect","useState","Fragment","io","connect","PropTypes","getProfileById","Message","profile","loading","auth","match","console","log","userChat","Chat","setChat","params","id","server","socket","on","messageFromBackEnd","onChange","e","target","message","value","submitChatMessage","preventDefault","fontSize","textAlign","maxWidth","margin","float","clear","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react'\nimport io from \"socket.io-client\";\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { getProfileById } from '../../actions/profile';\nconst Message = ({\n    getProfileById,\n    profile:{ profile, loading},\n    auth,\n    match}) => {\n    console.log(profile);\n    const [Chat, setChat] = useState({\n        userChat: ''\n    });\n    useEffect(() => {\n        getProfileById(match.params.id);\n\n        let server = \"http://localhost:5000\";\n\n        let socket = io(server);\n\n        socket.on(\"Output Chat Message\", messageFromBackEnd => {\n            console.log(messageFromBackEnd)\n        })\n    }, [getProfileById, match.params.id]);\n\n    const onChange = (e) => {\n        setChat({ ...Chat, [e.target.message]: e.target.value })\n    }\n\n    const submitChatMessage = (e) => {\n        e.preventDefault();\nconsole.log(e);\n        // let chatMessage = this.state.chatMessage\n        // let userId = this.props.user.userData._id\n        // let userName = this.props.user.userData.name;\n        // let userImage = this.props.user.userData.image;\n        // let nowTime = moment();\n        // let type = \"Image\"\n\n        // this.socket.emit(\"Input Chat Message\", {\n        //     chatMessage,\n        //     userId,\n        //     userName,\n        //     userImage,\n        //     nowTime,\n        //     type\n        // });\n        // this.setState({ chatMessage: \"\" })\n    }\n\n\n    return (\n        <Fragment>\n            <div>\n                <p style={ { fontSize: '2rem', textAlign: 'center' } }> Real Time Chat</p>\n            </div>\n\n            <div style={ { maxWidth: '800px', margin: '0 auto' } }>\n                <div className=\"infinite-container\">\n                    {/* {this.props.chats && (\n                            <div>{this.renderCards()}</div>\n                        )} */}\n                    <div\n                        // ref={el => {\n                        //     this.messagesEnd = el;\n                        // }}\n                        style={ { float: \"left\", clear: \"both\" } }\n                    />\n                </div>\n                <form onSubmit={ e => submitChatMessage(e) }>\n                    <div>\n                        <input placeholder=\"Let's start talking\"\n                            type=\"text\"\n                            name='chatMessage'\n                            onChange={ e => onChange(e) } />\n                    </div>\n                    <input type='submit' className='btn btn-primary' value='send' />\n                </form>\n\n            </div>\n        </Fragment>\n    )\n\n}\nMessage.propTypes = {\n    getProfileById: PropTypes.func.isRequired,\n    profile: PropTypes.object.isRequired,\n    auth: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n        auth: state.auth,\n        profile: state.profile\n    \n})\n\n\nexport default connect(mapStateToProps, { getProfileById})(Message);"]},"metadata":{},"sourceType":"module"}