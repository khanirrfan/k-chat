{"ast":null,"code":"import _objectSpread from \"/home/irfan/Desktop/tag_mango_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/irfan/Desktop/tag_mango_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/irfan/Desktop/tag_mango_test/client/src/component/message/message.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport io from \"socket.io-client\";\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { getProfileById } from '../../actions/profile';\n\nconst Message = ({\n  getProfileById,\n  profile: {\n    profile,\n    loading\n  },\n  auth,\n  match\n}) => {\n  console.log(profile);\n\n  const _useState = useState({\n    userChat: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        Chat = _useState2[0],\n        setChat = _useState2[1];\n\n  useEffect(() => {\n    getProfileById(match.params.id);\n    let server = \"http://localhost:5000\";\n    let socket = io(server);\n    socket.on(\"Output Chat Message\", messageFromBackEnd => {\n      console.log(messageFromBackEnd);\n    });\n  }, [getProfileById, match.params.id]);\n\n  const onChange = e => {\n    setChat(_objectSpread({}, Chat, {\n      [e.target.message]: e.target.value\n    }));\n  };\n\n  const submitChatMessage = e => {\n    e.preventDefault();\n    console.log(e);\n    let chatMessage = setChat(_objectSpread({}, Chat, {\n      [e.target.message]: e.target.value\n    }));\n    let userId = profile._id;\n    let userName = profile.name;\n    let userImage = profile.avatar;\n    let nowTime = moment();\n    let type = \"Image\";\n    this.socket.emit(\"Input Chat Message\", {\n      chatMessage,\n      userId,\n      userName,\n      userImage,\n      nowTime,\n      type\n    });\n    setChat({\n      userChat: \"\"\n    });\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    style: {\n      fontSize: '2rem',\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \" Real Time Chat\")), React.createElement(\"div\", {\n    style: {\n      maxWidth: '800px',\n      margin: '0 auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"infinite-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    // ref={el => {\n    //     this.messagesEnd = el;\n    // }}\n    style: {\n      float: \"left\",\n      clear: \"both\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), React.createElement(\"form\", {\n    onSubmit: e => submitChatMessage(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Let's start talking\",\n    type: \"text\",\n    name: \"chatMessage\",\n    onChange: e => onChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    value: \"send\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }))));\n};\n\nMessage.propTypes = {\n  getProfileById: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getProfileById\n})(Message);","map":{"version":3,"sources":["/home/irfan/Desktop/tag_mango_test/client/src/component/message/message.js"],"names":["React","useEffect","useState","Fragment","io","connect","PropTypes","moment","getProfileById","Message","profile","loading","auth","match","console","log","userChat","Chat","setChat","params","id","server","socket","on","messageFromBackEnd","onChange","e","target","message","value","submitChatMessage","preventDefault","chatMessage","userId","_id","userName","name","userImage","avatar","nowTime","type","emit","fontSize","textAlign","maxWidth","margin","float","clear","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react'\nimport io from \"socket.io-client\";\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { getProfileById } from '../../actions/profile';\nconst Message = ({\n    getProfileById,\n    profile:{ profile, loading},\n    auth,\n    match}) => {\n    console.log(profile);\n    const [Chat, setChat] = useState({\n        userChat: ''\n    });\n    useEffect(() => {\n        getProfileById(match.params.id);\n\n        let server = \"http://localhost:5000\";\n\n        let socket = io(server);\n\n        socket.on(\"Output Chat Message\", messageFromBackEnd => {\n            console.log(messageFromBackEnd)\n        })\n    }, [getProfileById, match.params.id]);\n\n    const onChange = (e) => {\n        setChat({ ...Chat, [e.target.message]: e.target.value })\n    }\n\n    const submitChatMessage = (e) => {\n        e.preventDefault();\nconsole.log(e);\n        let chatMessage = setChat({ ...Chat, [e.target.message]: e.target.value })\n        let userId = profile._id\n        let userName = profile.name;\n        let userImage = profile.avatar;\n        let nowTime = moment();\n        let type = \"Image\"\n\n        this.socket.emit(\"Input Chat Message\", {\n            chatMessage,\n            userId,\n            userName,\n            userImage,\n            nowTime,\n            type\n        });\n        setChat({ userChat: \"\" })\n    }\n\n\n    return (\n        <Fragment>\n            <div>\n                <p style={ { fontSize: '2rem', textAlign: 'center' } }> Real Time Chat</p>\n            </div>\n\n            <div style={ { maxWidth: '800px', margin: '0 auto' } }>\n                <div className=\"infinite-container\">\n                    {/* {this.props.chats && (\n                            <div>{this.renderCards()}</div>\n                        )} */}\n                    <div\n                        // ref={el => {\n                        //     this.messagesEnd = el;\n                        // }}\n                        style={ { float: \"left\", clear: \"both\" } }\n                    />\n                </div>\n                <form onSubmit={ e => submitChatMessage(e) }>\n                    <div>\n                        <input placeholder=\"Let's start talking\"\n                            type=\"text\"\n                            name='chatMessage'\n                            onChange={ e => onChange(e) } />\n                    </div>\n                    <input type='submit' className='btn btn-primary' value='send' />\n                </form>\n\n            </div>\n        </Fragment>\n    )\n\n}\nMessage.propTypes = {\n    getProfileById: PropTypes.func.isRequired,\n    profile: PropTypes.object.isRequired,\n    auth: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n        auth: state.auth,\n        profile: state.profile\n    \n})\n\n\nexport default connect(mapStateToProps, { getProfileById})(Message);"]},"metadata":{},"sourceType":"module"}