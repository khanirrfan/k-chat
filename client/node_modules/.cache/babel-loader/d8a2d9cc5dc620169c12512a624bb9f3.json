{"ast":null,"code":"import _objectSpread from \"/home/irfan/Desktop/tag_mango_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/irfan/Desktop/tag_mango_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/irfan/Desktop/tag_mango_test/client/src/component/message/message.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport io from \"socket.io-client\";\nimport { connect } from \"react-redux\";\n\nconst Message = () => {\n  const _useState = useState({\n    userChat: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        Chat = _useState2[0],\n        setChat = _useState2[1];\n\n  useEffect(() => {\n    let server = \"http://localhost:5000\";\n    this.socket = io(server);\n    this.socket.on(\"Output Chat Message\", messageFromBackEnd => {\n      console.log(messageFromBackEnd);\n    });\n  });\n\n  const onChange = e => {\n    setChat(_objectSpread({}, Chat, {\n      [e.target.message]: e.target.value\n    }));\n  };\n\n  const submitChatMessage = e => {\n    e.preventDefault(); // let chatMessage = this.state.chatMessage\n    // let userId = this.props.user.userData._id\n    // let userName = this.props.user.userData.name;\n    // let userImage = this.props.user.userData.image;\n    // let nowTime = moment();\n    // let type = \"Image\"\n    // this.socket.emit(\"Input Chat Message\", {\n    //     chatMessage,\n    //     userId,\n    //     userName,\n    //     userImage,\n    //     nowTime,\n    //     type\n    // });\n    // this.setState({ chatMessage: \"\" })\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    style: {\n      fontSize: '2rem',\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \" Real Time Chat\")), React.createElement(\"div\", {\n    style: {\n      maxWidth: '800px',\n      margin: '0 auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"infinite-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    // ref={el => {\n    //     this.messagesEnd = el;\n    // }}\n    style: {\n      float: \"left\",\n      clear: \"both\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Let's start talking\",\n    type: \"text\",\n    name: \"chatMessage\",\n    value: userChat,\n    onChange: e => onChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps)(Message);","map":{"version":3,"sources":["/home/irfan/Desktop/tag_mango_test/client/src/component/message/message.js"],"names":["React","useEffect","useState","Fragment","io","connect","Message","userChat","Chat","setChat","server","socket","on","messageFromBackEnd","console","log","onChange","e","target","message","value","submitChatMessage","preventDefault","fontSize","textAlign","maxWidth","margin","float","clear","mapStateToProps","state","user"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACMJ,QAAQ,CAAC;AAC7BK,IAAAA,QAAQ,EAAE;AADmB,GAAD,CADd;AAAA;AAAA,QACXC,IADW;AAAA,QACLC,OADK;;AAIlBR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,MAAM,GAAG,uBAAb;AAEA,SAAKC,MAAL,GAAcP,EAAE,CAACM,MAAD,CAAhB;AAEA,SAAKC,MAAL,CAAYC,EAAZ,CAAe,qBAAf,EAAsCC,kBAAkB,IAAI;AACxDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;AACH,KAFD;AAGH,GARQ,CAAT;;AAUA,QAAMG,QAAQ,GAAIC,CAAD,IAAO;AACpBR,IAAAA,OAAO,mBAAMD,IAAN;AAAY,OAACS,CAAC,CAACC,MAAF,CAASC,OAAV,GAAoBF,CAAC,CAACC,MAAF,CAASE;AAAzC,OAAP;AACH,GAFD;;AAIA,QAAMC,iBAAiB,GAAIJ,CAAD,IAAO;AAC7BA,IAAAA,CAAC,CAACK,cAAF,GAD6B,CAG7B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAnBD;;AAsBA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,KAAK,EAAG;AAAEC,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,CADJ,EAKI;AAAK,IAAA,KAAK,EAAG;AAAEC,MAAAA,QAAQ,EAAE,OAAZ;AAAqBC,MAAAA,MAAM,EAAE;AAA7B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII;AACI;AACA;AACA;AACA,IAAA,KAAK,EAAG;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,WAAW,EAAC,qBAAnB;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,IAAI,EAAC,aAFT;AAGI,IAAA,KAAK,EAAGrB,QAHZ;AAII,IAAA,QAAQ,EAAGU,CAAC,IAAID,QAAQ,CAACC,CAAD,CAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAbJ,CALJ,CADJ;AA8BH,CAtED;;AAwEA,MAAMY,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAED,KAAK,CAACC;AADT,GAAP;AAGH,CAJD;;AAOA,eAAe1B,OAAO,CAACwB,eAAD,CAAP,CAAyBvB,OAAzB,CAAf","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react'\nimport io from \"socket.io-client\";\nimport { connect } from \"react-redux\";\n\nconst Message = () => {\n    const [Chat, setChat] = useState({\n        userChat: ''\n    });\n    useEffect(() => {\n        let server = \"http://localhost:5000\";\n\n        this.socket = io(server);\n\n        this.socket.on(\"Output Chat Message\", messageFromBackEnd => {\n            console.log(messageFromBackEnd)\n        })\n    });\n\n    const onChange = (e) => {\n        setChat({ ...Chat, [e.target.message]: e.target.value })\n    }\n\n    const submitChatMessage = (e) => {\n        e.preventDefault();\n\n        // let chatMessage = this.state.chatMessage\n        // let userId = this.props.user.userData._id\n        // let userName = this.props.user.userData.name;\n        // let userImage = this.props.user.userData.image;\n        // let nowTime = moment();\n        // let type = \"Image\"\n\n        // this.socket.emit(\"Input Chat Message\", {\n        //     chatMessage,\n        //     userId,\n        //     userName,\n        //     userImage,\n        //     nowTime,\n        //     type\n        // });\n        // this.setState({ chatMessage: \"\" })\n    }\n\n\n    return (\n        <Fragment>\n            <div>\n                <p style={ { fontSize: '2rem', textAlign: 'center' } }> Real Time Chat</p>\n            </div>\n\n            <div style={ { maxWidth: '800px', margin: '0 auto' } }>\n                <div className=\"infinite-container\">\n                    {/* {this.props.chats && (\n                            <div>{this.renderCards()}</div>\n                        )} */}\n                    <div\n                        // ref={el => {\n                        //     this.messagesEnd = el;\n                        // }}\n                        style={ { float: \"left\", clear: \"both\" } }\n                    />\n                </div>\n\n                <div>\n                    <input placeholder=\"Let's start talking\"\n                        type=\"text\"\n                        name='chatMessage'\n                        value={ userChat }\n                        onChange={ e => onChange(e) } />\n                </div>\n            </div>\n        </Fragment>\n    )\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.user\n    }\n}\n\n\nexport default connect(mapStateToProps)(Message);"]},"metadata":{},"sourceType":"module"}