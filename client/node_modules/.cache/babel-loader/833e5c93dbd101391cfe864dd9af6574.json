{"ast":null,"code":"import _objectSpread from \"/home/irfan/Desktop/tag_mango_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/irfan/Desktop/tag_mango_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/irfan/Desktop/tag_mango_test/client/src/component/message/message.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Form, Icon, Input, Button, Row, Col } from 'antd';\nimport io from \"socket.io-client\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\n\nconst Message = () => {\n  const _useState = useState({\n    message: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        Chat = _useState2[0],\n        setChat = _useState2[1];\n\n  useEffect(() => {\n    let server = \"http://localhost:5000\";\n    this.socket = io(server);\n    this.socket.on(\"Output Chat Message\", messageFromBackEnd => {\n      console.log(messageFromBackEnd);\n    });\n  }); // componentDidMount() {\n  //     let server = \"http://localhost:5000\";\n  //     this.socket = io(server);\n  //     this.socket.on(\"Output Chat Message\", messageFromBackEnd => {\n  //         console.log(messageFromBackEnd)\n  //     })\n  // }\n\n  const hanleSearchChange = e => {\n    setChat(_objectSpread({}, Chat, {\n      [e.target.message]: e.target.value\n    }));\n  };\n\n  const submitChatMessage = e => {\n    e.preventDefault();\n    let chatMessage = this.state.chatMessage;\n    let userId = this.props.user.userData._id;\n    let userName = this.props.user.userData.name;\n    let userImage = this.props.user.userData.image;\n    let nowTime = moment();\n    let type = \"Image\";\n    this.socket.emit(\"Input Chat Message\", {\n      chatMessage,\n      userId,\n      userName,\n      userImage,\n      nowTime,\n      type\n    });\n    this.setState({\n      chatMessage: \"\"\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    style: {\n      fontSize: '2rem',\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \" Real Time Chat\")), React.createElement(\"div\", {\n    style: {\n      maxWidth: '800px',\n      margin: '0 auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"infinite-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    // ref={el => {\n    //     this.messagesEnd = el;\n    // }}\n    style: {\n      float: \"left\",\n      clear: \"both\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Form, {\n    layout: \"inline\",\n    onSubmit: e => submitChatMessage(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Col, {\n    span: 18,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Input, {\n    id: \"message\",\n    prefix: React.createElement(Icon, {\n      type: \"message\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }),\n    placeholder: \"Let's start talking\",\n    type: \"text\",\n    name: \"message\",\n    value: message,\n    onChange: e => hanleSearchChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), React.createElement(Col, {\n    span: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(Col, {\n    span: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    style: {\n      width: '100%'\n    },\n    onClick: e => submitChatMessage(e),\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"enter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps)(Message);","map":{"version":3,"sources":["/home/irfan/Desktop/tag_mango_test/client/src/component/message/message.js"],"names":["React","useEffect","useState","Form","Icon","Input","Button","Row","Col","io","connect","moment","Message","message","Chat","setChat","server","socket","on","messageFromBackEnd","console","log","hanleSearchChange","e","target","value","submitChatMessage","preventDefault","chatMessage","state","userId","props","user","userData","_id","userName","name","userImage","image","nowTime","type","emit","setState","fontSize","textAlign","maxWidth","margin","float","clear","color","width","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Icon, Input, Button, Row, Col, } from 'antd';\nimport io from \"socket.io-client\";\nimport { connect } from \"react-redux\";\nimport  moment  from \"moment\";\n\nconst Message = () =>  {\n    const [Chat, setChat] = useState({\n        message : ''\n      });\nuseEffect(() => {\n     let server = \"http://localhost:5000\";\n\n        this.socket = io(server);\n\n        this.socket.on(\"Output Chat Message\", messageFromBackEnd => {\n            console.log(messageFromBackEnd)\n        })\n});\n    // componentDidMount() {\n    //     let server = \"http://localhost:5000\";\n\n    //     this.socket = io(server);\n\n    //     this.socket.on(\"Output Chat Message\", messageFromBackEnd => {\n    //         console.log(messageFromBackEnd)\n    //     })\n    // }\n\n    const hanleSearchChange =(e) => {\n        setChat({...Chat, [e.target.message]: e.target.value})\n    }\n\n    const submitChatMessage = (e) => {\n        e.preventDefault();\n\n        let chatMessage = this.state.chatMessage\n        let userId = this.props.user.userData._id\n        let userName = this.props.user.userData.name;\n        let userImage = this.props.user.userData.image;\n        let nowTime = moment();\n        let type = \"Image\"\n\n        this.socket.emit(\"Input Chat Message\", {\n            chatMessage,\n            userId,\n            userName,\n            userImage,\n            nowTime,\n            type\n        });\n        this.setState({ chatMessage: \"\" })\n    }\n\n    \n        return (\n            <React.Fragment>\n                <div>\n                    <p style={{ fontSize: '2rem', textAlign: 'center' }}> Real Time Chat</p>\n                </div>\n\n                <div style={{ maxWidth: '800px', margin: '0 auto' }}>\n                    <div className=\"infinite-container\">\n                        {/* {this.props.chats && (\n                            <div>{this.renderCards()}</div>\n                        )} */}\n                        <div\n                            // ref={el => {\n                            //     this.messagesEnd = el;\n                            // }}\n                            style={{ float: \"left\", clear: \"both\" }}\n                        />\n                    </div>\n\n                    <Row >\n                        <Form layout=\"inline\" onSubmit={e => submitChatMessage(e)}>\n                            <Col span={18}>\n                                <Input\n                                    id=\"message\"\n                                    prefix={<Icon type=\"message\" \n                                    style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                    placeholder=\"Let's start talking\"\n                                    type=\"text\"\n                                    name = 'message'\n                                    value = {message}\n                                    onChange={e => hanleSearchChange(e)}\n                                />\n                            </Col>\n                            <Col span={2}>\n                                \n                            </Col>\n\n                            <Col span={4}>\n                                <Button type=\"primary\" style={{ width: '100%' }} onClick={e => submitChatMessage(e)}  htmlType=\"submit\">\n                                    <Icon type=\"enter\" />\n                                </Button>\n                            </Col>\n                        </Form>\n                    </Row>\n                </div>\n            </React.Fragment>\n        )\n    \n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.user\n    }\n}\n\n\nexport default connect(mapStateToProps)(Message);"]},"metadata":{},"sourceType":"module"}